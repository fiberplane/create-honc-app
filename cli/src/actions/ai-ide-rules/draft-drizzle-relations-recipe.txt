For relations

<example type="relations" relationType="one-to-one">
  <description>
    An example of a one-to-one relation between users and users, where a user can invite another (this example uses a self reference):
  </description>
  <typescript>
    import { sqliteTable, text, integer, boolean } from 'drizzle-orm/sqlite-core';
    import { relations } from 'drizzle-orm';
    export const users = sqliteTable('users', {
      id: integer("id", { mode: "number" }).primaryKey(),
      name: text('name'),
      invitedBy: integer('invited_by'),
    });
    export const usersRelations = relations(users, ({ one }) => ({
      invitee: one(users, {
        fields: [users.invitedBy],
        references: [users.id],
      }),
    }));
  </typescript>
</example>
<example type="relations" relationType="many-to-one">
  <description>
      Drizzle ORM provides you an API to define one-to-many relations between tables with relations operator.
      Example of one-to-many relation between users and posts they've written,
      and comments on those posts..
  </description>
  <typescript>
    import { sqliteTable, text, integer } from 'drizzle-orm/sqlite-core';
    import { relations } from 'drizzle-orm';
    export const users = sqliteTable('users', {
      id: integer("id", { mode: "number" }).primaryKey(),
      name: text('name'),
    });
    export const usersRelations = relations(users, ({ many }) => ({
      posts: many(posts),
    }));
    export const posts = sqliteTable('posts', {
      id: integer("id", { mode: "number" }).primaryKey(),
      content: text('content'),
      authorId: integer('author_id'),
    });
    export const postsRelations = relations(posts, ({ one, many }) => ({
      author: one(users, {
        fields: [posts.authorId],
        references: [users.id],
      }),
      comments: many(comments)
    }));
    export const comments = sqliteTable('comments', {
      id: integer("id", { mode: "number" }).primaryKey(),
      text: text('text'),
      authorId: integer('author_id'),
      postId: integer('post_id'),
    });
    export const commentsRelations = relations(comments, ({ one }) => ({
      post: one(posts, {
        fields: [comments.postId],
        references: [posts.id],
      }),
    }));
  </typescript>
</example>
<example type="relations" relationType="many-to-many">
  <description>
    Drizzle ORM provides you an API to define many-to-many relations between tables through so called junction or join tables, they have to be explicitly defined and store associations between related tables.
    Example of many-to-many relation between users and groups:
  </description>
  <typescript>
      import { relations } from 'drizzle-orm';
      import { integer, sqliteTable, primaryKey, text } from 'drizzle-orm/sqlite-core';
      export const users = sqliteTable('users', {
        id: integer("id", { mode: "number" }).primaryKey(),
        name: text('name'),
      });
      export const usersRelations = relations(users, ({ many }) => ({
        usersToGroups: many(usersToGroups),
      }));
      export const groups = sqliteTable('groups', {
        id: integer("id", { mode: "number" }).primaryKey(),
        name: text('name'),
      });
      export const groupsRelations = relations(groups, ({ many }) => ({
        usersToGroups: many(usersToGroups),
      }));
      export const usersToGroups = sqliteTable(
        'users_to_groups',
        {
          userId: integer('user_id')
            .notNull()
            .references(() => users.id),
          groupId: integer('group_id')
            .notNull()
            .references(() => groups.id),
        },
        (t) => ({
          pk: primaryKey({ columns: [t.userId, t.groupId] }),
        }),
      );
      export const usersToGroupsRelations = relations(usersToGroups, ({ one }) => ({
        group: one(groups, {
          fields: [usersToGroups.groupId],
          references: [groups.id],
        }),
        user: one(users, {
          fields: [usersToGroups.userId],
          references: [users.id],
        }),
      }));
  </typescript>
</example>
